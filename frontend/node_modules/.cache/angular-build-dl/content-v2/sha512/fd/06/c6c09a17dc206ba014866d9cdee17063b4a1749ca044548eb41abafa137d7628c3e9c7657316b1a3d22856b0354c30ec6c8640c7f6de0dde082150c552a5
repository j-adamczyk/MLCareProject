{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/add-patient/add-patient.component.ts","webpack:///src/app/components/add-patient/add-patient.component.html","webpack:///src/app/components/doctor-navigation/doctor-navigation.component.ts","webpack:///src/app/components/doctor-navigation/doctor-navigation.component.html","webpack:///src/app/components/patient-details/patient-details.component.ts","webpack:///src/app/components/patient-details/patient-details.component.html","webpack:///src/app/components/patients/patients.component.ts","webpack:///src/app/components/patients/patients.component.html","webpack:///src/app/components/pick-disease-dialog/pick-disease-dialog.component.ts","webpack:///src/app/components/pick-disease-dialog/pick-disease-dialog.component.html","webpack:///src/app/components/pick-disease-prediction/pick-disease-prediction.component.ts","webpack:///src/app/components/pick-disease-prediction/pick-disease-prediction.component.html","webpack:///src/app/components/visit-details/visit-details.component.ts","webpack:///src/app/components/visit-details/visit-details.component.html","webpack:///src/app/services/in-memory-data.service.ts","webpack:///src/app/services/patient.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","declarations","imports","AppComponent","breakpointObserver","title","isHandset$","observe","Handset","pipe","result","matches","selector","templateUrl","styleUrls","AppModule","dataEncapsulation","entryComponents","providers","bootstrap","AddPatientComponent","patientService","snaackBar","added","clearPatientData","patientData","patientId","patient","firstName","middleName","lastName","createPatient","subscribe","response","console","log","openSnackBar","error","message","action","open","duration","gender","address","birthDate","birthPlace","phoneNumber","email","visits","predictions","savePatient","DoctorNavigationComponent","PatientDetailsComponent","route","location","displayedColumns","dataSource","patientVisit","getPatient","wentBack","data","snapshot","paramMap","get","back","event","filterValue","target","value","filter","trim","toLowerCase","goBack","filterName","PatientsComponent","router","patients","getPatients","getAllPatients","PickDiseaseDialogComponent","diseases","dis","predictDiseases","PickDiseasePredictionComponent","VisitDetailsComponent","dialog","columnsToDisplay","featuresColumnsToDisplay","loadVisit","loadDiseases","visitId","visit","exams","getAllDiseases","diss","openPickDiseases","openPickExams","height","minHeight","animations","InMemoryDataService","doctors","doctorId","doctorName","localFeatures","name","unit","localExams","date","features","slice","localPrediction","disease","description","localVisits","doctor","neededFeatures","length","Math","max","map","providedIn","baseURL","diseaseURL","PatientService","http","post","put","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {PatientsComponent} from './components/patients/patients.component';\nimport {PatientDetailsComponent} from './components/patient-details/patient-details.component';\nimport {AddPatientComponent} from './components/add-patient/add-patient.component';\nimport {VisitDetailsComponent} from './components/visit-details/visit-details.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'tutorials', pathMatch: 'full' },\n  { path: 'patients', component: PatientsComponent },\n  { path: 'patient/:id', component: PatientDetailsComponent },\n  { path: 'add-patient', component: AddPatientComponent },\n  { path: 'patient/:id/:visitId', component: VisitDetailsComponent },\n];\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forRoot(routes),\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {map, shareReplay} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<link href=\"https://fonts.googleapis.com/css2?family=Nunito:wght@700&display=swap\" rel=\"stylesheet\">\n<router-outlet></router-outlet>\n<mat-sidenav-container class=\"sidenav-container\">\n\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n               [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n               [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n               [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar color=\"accent\">Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/\">Home Page</a>\n      <a mat-list-item routerLink=\"patients\">Patient Data</a>\n      <a mat-list-item routerLink=\"add-patient\">Add patient</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <div class=\"container mt-3\">\n  </div>\n  <router-outlet></router-outlet>\n\n</mat-sidenav-container>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSliderModule} from '@angular/material/slider';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { DoctorNavigationComponent } from './components/doctor-navigation/doctor-navigation.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport {MatInputModule} from '@angular/material/input';\nimport { PatientDetailsComponent } from './components/patient-details/patient-details.component';\nimport { PatientsComponent } from './components/patients/patients.component';\nimport {FormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AddPatientComponent } from './components/add-patient/add-patient.component';\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './services/in-memory-data.service';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSnackBarModule, MatSnackBar} from '@angular/material/snack-bar';\nimport { VisitDetailsComponent } from './components/visit-details/visit-details.component';\nimport { PickDiseasePredictionComponent } from './components/pick-disease-prediction/pick-disease-prediction.component';\nimport { PickDiseaseDialogComponent } from './components/pick-disease-dialog/pick-disease-dialog.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSelectModule} from '@angular/material/select';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DoctorNavigationComponent,\n    PatientDetailsComponent,\n    PatientsComponent,\n    AddPatientComponent,\n    VisitDetailsComponent,\n    PickDiseasePredictionComponent,\n    PickDiseaseDialogComponent,\n  ],\n    imports: [\n        BrowserModule,\n        MatToolbarModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatSliderModule,\n        BrowserAnimationsModule,\n        LayoutModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatListModule,\n        MatInputModule,\n        FormsModule,\n        HttpClientModule,\n        AppRoutingModule,\n        HttpClientModule,\n        HttpClientInMemoryWebApiModule.forRoot(\n            InMemoryDataService, {dataEncapsulation: false}\n        ),\n        MatTableModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatSelectModule\n    ],\n  entryComponents: [PickDiseaseDialogComponent],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {PatientService} from '../../services/patient.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {Patient} from '../../interfaces/patient';\n\n@Component({\n  selector: 'app-add-patient',\n  templateUrl: './add-patient.component.html',\n  styleUrls: ['./add-patient.component.css']\n})\nexport class AddPatientComponent implements OnInit {\n  patient: Patient;\n  added = false;\n  constructor(private patientService: PatientService, private snaackBar: MatSnackBar) {\n    this.clearPatientData();\n  }\n\n  ngOnInit(): void {\n  }\n\n  savePatient(){\n    this.added = false;\n    const patientData = {\n      patientId: this.patient.patientId,\n      firstName: this.patient.firstName,\n      middleName: this.patient.middleName,\n      lastName: this.patient.lastName,\n    };\n    this.patientService.createPatient(this.patient).subscribe(\n      response => {\n        console.log(response);\n        this.added = true;\n        this.clearPatientData();\n        this.openSnackBar('Patient added successfully', 'Close');\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  openSnackBar(message: string, action: string) {\n    this.snaackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n  clearPatientData(){\n    this.added = false;\n    this.patient = {\n      id: -1,\n      patientId: '',\n      gender: -1,\n      firstName: '',\n      middleName: '',\n      lastName: '',\n      address: '',\n      birthDate: '',\n      birthPlace: '',\n      phoneNumber: '',\n      email: '',\n      visits: [],\n      predictions: []\n    };\n  }\n\n}\n","<div class=\"example-container\">\n  <div>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>First name</mat-label>\n      <label>\n        <input matInput\n               placeholder=\"First Name\"\n               type=\"text\"\n               required\n               [(ngModel)]=\"patient.firstName\">\n      </label>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Middle name</mat-label>\n      <input matInput\n             placeholder=\"Middle Name\"\n             type=\"text\"\n             [(ngModel)]=\"patient.middleName\">\n    </mat-form-field>\n    <br>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Last name</mat-label>\n      <input matInput\n             placeholder=\"Last Name\"\n             type=\"text\"\n             required\n             [(ngModel)]=\"patient.lastName\">\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Gender</mat-label>\n<!--todo-->\n      <mat-select disableRipple>\n        <mat-option value=\"0\" [(ngModel)]=\"patient.gender\">Male</mat-option>\n        <mat-option value=\"1\" [(ngModel)]=\"patient.gender\">Female</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <br>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Address</mat-label>\n      <input matInput\n             placeholder=\"Address\"\n             type=\"text\"\n             required\n             [(ngModel)]=\"patient.address\">\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Patient Id</mat-label>\n      <input matInput\n             placeholder=\"Patient Id\"\n             type=\"text\"\n             required\n             [(ngModel)]=\"patient.patientId\">\n    </mat-form-field>\n    <br>\n\n    <button mat-raised-button\n            (click)=\"savePatient()\"\n            class=\"btn btn-success\"\n            [disabled]=\"!patient.firstName || !patient.lastName || !patient.patientId\"\n            color=\"primary\">Submit</button>\n  </div>\n\n\n\n</div>\n\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-doctor-navigation',\n  templateUrl: './doctor-navigation.component.html',\n  styleUrls: ['./doctor-navigation.component.css']\n})\nexport class DoctorNavigationComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"patients\">Patient Data</a>\n      <a mat-list-item routerLink=\"add-patient\">Add patient</a>\n      <a mat-list-item href=\"#\">Predictions</a>\n      <a mat-list-item href=\"#\">Predict disease</a>\n      <a mat-list-item href=\"#\">Notes</a>\n      <a mat-list-item href=\"#\">Change Patient</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>MLCare</span>\n      <span class=\"example-spacer\"></span>\n      <form class=\"example-form\">\n        <table class=\"example-full-width\" cellspacing=\"0\"><tr>\n          <td><mat-form-field class=\"example-full-width\" floatLabel=\"never\">\n            <mat-label >Login</mat-label>\n            <input matInput>\n          </mat-form-field></td>\n          <td><mat-form-field class=\"example-full-width\" floatLabel=\"never\">\n            <input type=\"password\" matInput placeholder=\"Password\">\n          </mat-form-field></td>\n        </tr></table>\n      </form>\n\n      <button type=\"button\" mat-raised-button class=\"login-button\">\n        Login\n      </button>\n    </mat-toolbar>\n    <!-- Add Content Here -->\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {PatientService} from '../../services/patient.service';\nimport {Patient} from '../../interfaces/patient';\nimport {ActivatedRoute} from '@angular/router';\nimport { Location } from '@angular/common';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { Visit } from 'src/app/interfaces/visit';\n\n@Component({\n  selector: 'app-patient-details',\n  templateUrl: './patient-details.component.html',\n  styleUrls: ['./patient-details.component.css']\n})\nexport class PatientDetailsComponent implements OnInit {\n  patientVisit: Visit[];\n  dataSource: MatTableDataSource<Visit>;\n  @Input() patient: Patient;\n  displayedColumns: string[] = ['id', 'visitDate', 'doctorId', 'doctorName'];\n  constructor(private patientService: PatientService,\n              private route: ActivatedRoute,\n              private location: Location) {\n    this.dataSource = new MatTableDataSource(this.patientVisit);\n  }\n\n  ngOnInit(): void {\n    this.getPatient();\n  }\n\n  getPatient(){\n    if (this.patientService.wentBack) {\n      this.patient = this.patientService.patient;\n      this.dataSource.data = this.patient.visits;\n    }\n    else {\n      const id = +this.route.snapshot.paramMap.get('id');\n      this.patientService.getPatient(id).subscribe(patient => {\n        this.patient = patient;\n        this.dataSource.data = patient.visits;\n        this.patientService.patient = patient;\n      });\n    }\n  }\n\n  goBack(): void {\n    this.patientService.wentBack = false;\n    this.location.back();\n  }\n\n  filterName(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n}\n","<h1>{{patient.firstName}}</h1>\n<button mat-raised-button color=\"accent\" (click)=\"goBack()\">Go back</button>\n<br>\n\n<!-- Visits table -->\n<mat-form-field class=\"SearchBar\">\n  <mat-label>Search</mat-label>\n  <input matInput (keyup)=\"filterName($event)\" placeholder=\"Visit\">\n</mat-form-field>\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n  <!--  ID column  -->\n  <ng-container matColumnDef=\"id\">\n    <mat-header-cell *matHeaderCellDef> Id </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\n  </ng-container>\n  <!--  Visit date column  -->\n  <ng-container matColumnDef=\"visitDate\">\n    <mat-header-cell *matHeaderCellDef> Visit Date </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.date}} </mat-cell>\n  </ng-container>\n\n  <!--  Doctor Id column  -->\n  <ng-container matColumnDef=\"doctorId\">\n    <mat-header-cell *matHeaderCellDef> Doctor Id </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.doctor.doctorId}} </mat-cell>\n  </ng-container>\n\n  <!--  Doctor Name column  -->\n  <ng-container matColumnDef=\"doctorName\">\n    <mat-header-cell *matHeaderCellDef> Doctor Name </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.doctor.doctorName}} </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\" routerLink=\"/patient/{{patient.id}}/{{row.id}}\" class=\"row-link\"></mat-row>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport {Patient} from '../../interfaces/patient';\nimport {PatientService} from '../../services/patient.service';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-patients',\n  templateUrl: './patients.component.html',\n  styleUrls: ['./patients.component.css']\n})\nexport class PatientsComponent implements OnInit {\n  patients: Patient[];\n  displayedColumns: string[] = ['id', 'firstName', 'lastName', 'birth', 'address'];\n  dataSource: MatTableDataSource<Patient>;\n  constructor(private patientService: PatientService, private router: Router) {\n    this.dataSource = new MatTableDataSource(this.patients);\n  }\n\n  ngOnInit(): void {\n    this.getPatients();\n  }\n\n  getPatients(){\n    this.patientService.wentBack = false;\n    this.patientService.getAllPatients().\n      subscribe(patients => {this.patients = patients;\n                             this.dataSource.data = patients; }\n      );\n  }\n\n  filterName(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n}\n","<mat-form-field class=\"SearchBar\">\n  <mat-label>Search</mat-label>\n  <input matInput (keyup)=\"filterName($event)\" placeholder=\"Patient\">\n</mat-form-field>\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n  <!--  ID column  -->\n  <ng-container matColumnDef=\"id\">\n    <mat-header-cell *matHeaderCellDef> Id </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\n  </ng-container>\n<!--  First Name column  -->\n  <ng-container matColumnDef=\"firstName\">\n    <mat-header-cell *matHeaderCellDef> First Name </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.firstName}} </mat-cell>\n  </ng-container>\n  <!--  Last Name column  -->\n  <ng-container matColumnDef=\"lastName\">\n    <mat-header-cell *matHeaderCellDef> Last Name </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.lastName}} </mat-cell>\n  </ng-container>\n  <!--  Birth column  -->\n  <ng-container matColumnDef=\"birth\">\n    <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.birthDate}}, {{element.birthPlace}} </mat-cell>\n  </ng-container>\n  <!--  Address column  -->\n  <ng-container matColumnDef=\"address\">\n    <mat-header-cell *matHeaderCellDef> Address </mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.address}} </mat-cell>\n  </ng-container>\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\" routerLink=\"/patient/{{row.id}}\" class=\"row-link\"></mat-row>\n</table>\n\n\n\n\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Patient} from '../../interfaces/patient';\nimport {Disease} from '../../interfaces/disease';\n\n@Component({\n  selector: 'app-pick-disease-dialog',\n  templateUrl: './pick-disease-dialog.component.html',\n  styleUrls: ['./pick-disease-dialog.component.css']\n})\nexport class PickDiseaseDialogComponent implements OnInit {\n  diseases: Disease[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data) {\n    this.diseases = data.dis;\n  }\n\n  ngOnInit(): void {\n  }\n\n  predictDiseases(){\n\n  }\n\n}\n","<h1 mat-dialog-title>Choose diseases to check</h1>\n<div mat-dialog-content>\n  Possible diseases to check:\n  <ul *ngFor=\"let disease of diseases\">\n      <mat-checkbox class=\"disease-list\"> {{disease.name}}</mat-checkbox>\n    <ul *ngFor=\"let feature of disease.neededFeatures\">{{feature.name}}</ul>\n  </ul>\n  <button mat-flat-button (click)=\"predictDiseases()\" disabled=\"\">Predict</button>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pick-disease-prediction',\n  templateUrl: './pick-disease-prediction.component.html',\n  styleUrls: ['./pick-disease-prediction.component.css']\n})\nexport class PickDiseasePredictionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>pick-disease-prediction works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport {PatientService} from '../../services/patient.service';\nimport {Visit} from '../../interfaces/visit';\nimport {ActivatedRoute} from '@angular/router';\nimport {Location} from '@angular/common';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {Exam} from '../../interfaces/exam';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {MatDialog} from '@angular/material/dialog';\nimport {PickDiseaseDialogComponent} from '../pick-disease-dialog/pick-disease-dialog.component';\nimport {Disease} from '../../interfaces/disease';\n\n@Component({\n  selector: 'app-visit-details',\n  templateUrl: './visit-details.component.html',\n  styleUrls: ['./visit-details.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class VisitDetailsComponent implements OnInit {\n  visit: Visit;\n  dataSource: MatTableDataSource<Exam>;\n  columnsToDisplay = ['Id', 'Name', 'Date'];\n  featuresColumnsToDisplay = ['featureName', 'featureValue'];\n  expandedElement: Exam | null;\n  diseases: Disease[];\n\n\n  constructor(private patientService: PatientService,\n              private route: ActivatedRoute,\n              private location: Location,\n              public dialog: MatDialog) {\n    this.dataSource = new MatTableDataSource<Exam>();\n    this.loadVisit();\n    this.loadDiseases();\n  }\n\n  ngOnInit(): void {\n  }\n\n  loadVisit(){\n    const visitId = +this.route.snapshot.paramMap.get('visitId');\n    if (this.patientService.patient != null){\n      this.visit = this.patientService.patient.visits.filter(visit => visit.id === visitId)[0];\n      this.dataSource.data = this.visit.exams;\n    } else {\n      const patientId = +this.route.snapshot.paramMap.get('id');\n      this.patientService.getPatient(patientId).subscribe(patient => { this.patientService.patient = patient;\n                                                                       this.visit = patient.visits.filter(visit => visit.id === visitId)[0];\n                                                                       this.dataSource.data = this.visit.exams;\n      });\n\n    }\n  }\n\n  loadDiseases(){\n    this.patientService.getAllDiseases().subscribe(diss => this.diseases = diss);\n  }\n\n  openPickDiseases(){\n    const dis = this.diseases;\n    console.log(dis);\n    this.dialog.open(PickDiseaseDialogComponent, {\n      data: {dis}\n    });\n  }\n\n  openPickExams(){\n\n  }\n\n  goBack(): void {\n    this.patientService.wentBack = true;\n    this.location.back();\n  }\n\n}\n","<p>{{visit.id}}</p>\n<button mat-raised-button (click)=\"goBack()\">Go back</button>\n<br>\n<button mat-raised-button color=\"accent\" [disabled]=\"this.diseases == null\" (click)=\"openPickDiseases()\">Predict disease</button>\n<button mat-raised-button color=\"accent\" (click)=\"openPickExams()\">Predict based on the exams</button>\n\n<table mat-table\n       [dataSource]=\"dataSource\" multiTemplateDataRows\n       class=\"mat-elevation-z8\">\n  <ng-container matColumnDef=\"{{column}}\" *ngFor=\"let column of columnsToDisplay\">\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element[column.toLowerCase()]}} </td>\n  </ng-container>\n\n<!--  &lt;!&ndash; Expanded Content Column - The detail row is made up of this one column that spans across all columns &ndash;&gt;-->\n  <ng-container matColumnDef=\"expandedDetail\">\n    <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\n      <div class=\"example-element-detail\"\n           [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n        <table mat-table [dataSource]=\"element.features\" class=\"mat-elevation-z0 inner-feature-table\">\n\n          <ng-container matColumnDef=\"featureName\">\n            <th mat-header-cell *matHeaderCellDef> Feature Name </th>\n            <td mat-cell *matCellDef=\"let elem\"> {{elem.name}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"featureValue\">\n            <th mat-header-cell *matHeaderCellDef> Value </th>\n            <td mat-cell *matCellDef=\"let elem\"> {{elem.value}} {{elem.unit}}</td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"featuresColumnsToDisplay\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: featuresColumnsToDisplay;\"></tr>\n        </table>\n      </div>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay;\"\n      class=\"example-element-row\"\n      [class.example-expanded-row]=\"expandedElement === element\"\n      (click)=\"expandedElement = expandedElement === element ? null : element\">\n  </tr>\n  <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\n</table>\n","import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Patient } from '../interfaces/patient';\nimport {Feature} from '../interfaces/feature';\nimport {Exam} from '../interfaces/exam';\nimport {Disease} from '../interfaces/disease';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    // patients part\n    const doctors = [{doctorId: 19, doctorName: 'Jan Brzechwa'},\n      {doctorId: 20, doctorName: 'Juliusz Słowacki'},\n      {doctorId: 22, doctorName: 'Severus Snape'}];\n    const localFeatures: Feature[] = [{name: 'parametr1', value: 10, unit: 'g'},\n      {name: 'parametr2', value: 20, unit: 'g'},\n      {name: 'parametr3', value: 30, unit: 'g'}];\n    const localExams: Exam[] = [\n      {id: 1, name: 'krwi', date: '10.10.2019',\n        features: localFeatures.slice(0, 2)},\n      {id: 2, name: 'USG', date: '12.10.2019',\n        features: localFeatures.slice(1, 3)},\n      {id: 3, name: 'EKG', date: '13.10.2019',\n        features: localFeatures.slice(0, 3)}\n    ];\n    const localPrediction = [{date: '11.10.2019', disease: 'choroba',\n      description: 'upsik'}];\n    const localVisits = [{id: 1, date: '09.10.2019',\n      doctor: doctors[0], exams: localExams.slice(0, 2),\n      predictions: localPrediction},\n      {id: 2, date: '10.10.2019',\n        doctor: doctors[1], exams: localExams.slice(1, 3),\n        predictions: localPrediction},\n      {id: 4, date: '09.10.2019',\n        doctor: doctors[2], exams: localExams,\n        predictions: localPrediction}, ];\n    const patients = [\n      { id: 1, patientId: '989898989898', gender: '0', address: 'Miasto w mieście', birthDate: '01.02.1960',\n        birthPlace: 'Bytom', phoneNumber: '123456789', email: 'mail@pe.el', firstName: 'Jan', middleName: '',\n        lastName: 'Kowalski', visits: localVisits },\n      { id: 2, patientId: '01', gender: '0', address: 'Hogwart', birthDate: '30.07.1990',\n        birthPlace: 'Dolina Godryka', phoneNumber: '123456789', email: 'magiczny@harry.hg', firstName: 'Harry', middleName: '',\n        lastName: 'Potter', visits: localVisits.slice(0, 2) },\n      { id: 3, patientId: '777', gender: '0', address: 'Anglia', birthDate: '21.10.1920',\n        birthPlace: 'Bytom', phoneNumber: '123456789', email: 'mail@pe.el', firstName: 'James', middleName: '',\n        lastName: 'Bond', visits: localVisits.slice(0, 1) },\n      { id: 4, patientId: '989898989898', gender: '0', address: 'Hogwart', birthDate: '01.02.1880',\n        birthPlace: 'Dolina Godryka', phoneNumber: '123456789', email: 'eeee@ze.co', firstName: 'Albus', middleName: 'Persiwal',\n        lastName: 'Dumbledore', visits: localVisits.slice(1, 3) },\n    ];\n\n    // predictions part\n    const predictions = [];\n\n    // diseases part\n    const diseases: Disease[] = [{id: 1, name: 'Hemophilia', neededFeatures: localFeatures.slice(0, 1)},\n      {id: 2, name: 'Cholera', neededFeatures: localFeatures.slice(1, 2)},\n      {id: 3, name: 'Anemia', neededFeatures: localFeatures.slice(0, 2)}];\n    return {patients, predictions, diseases};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the patients array is empty,\n  // the method below returns the initial number (1).\n  // if the patients array is not empty, the method below returns the highest\n  // patient id + 1.\n  genId(patients: Patient[]): number {\n    return patients.length > 0 ? Math.max(...patients.map(patient => patient.id)) + 1 : 1;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Patient} from '../interfaces/patient';\nimport {Observable} from 'rxjs';\nimport {Disease} from '../interfaces/disease';\n\n// const baseURL = 'localhost:8080/api/';\nconst baseURL = 'api/patients';\nconst diseaseURL = 'api/diseases';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n  patient: Patient;\n  wentBack: boolean;\n\n  constructor(private http: HttpClient) { }\n\n  getAllPatients(){\n    return this.http.get<Patient[]>(baseURL);\n  }\n\n  getAllDiseases(){\n    return this.http.get<Disease[]>(diseaseURL);\n  }\n\n  getPatient(id): Observable<Patient>{\n    return this.http.get<Patient>(`${baseURL}/${id}`);\n  }\n\n  createPatient(patient){\n    return this.http.post(baseURL, patient);\n  }\n\n  updatePatient(patient, id){\n    return this.http.put(`${baseURL}/${id}`, patient);\n  }\n\n  deletePatient(id) {\n    return this.http.delete(`${baseURL}/${id}`);\n  }\n\n  deleteAllPatients() {\n    return this.http.delete(baseURL);\n  }\n\n  findByName(name) {//todo\n    return this.http.get(`${baseURL}?name=${name}`);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}